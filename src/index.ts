import { app, BrowserWindow, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import DataStore from './dataStore';
import { getExcelSheetnames, getExcelData } from './services/python/pythonScripts';

import WellsService from './database/sqlite/services/wellsService';
import AreasService from './database/sqlite/services/licensedAreasService';
const Wells = new WellsService();
const Areas = new AreasService();
import { sequelize } from './database/sqlite/database';
const tempStorage = new DataStore()
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}

const createWindow = async (): Promise<void> => {
	try {
		await sequelize.sync({ force: true });
	} catch (error) {
		console.log(error)
	}
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	mainWindow.webContents.openDevTools();
	ipcMain.handle('get-excel-sheetnames', async (event, selectedFile) => {
		try {
			const sheetnames = await getExcelSheetnames(JSON.parse(selectedFile));
			return (sheetnames)
		} catch (error) {
			console.log(error);
			throw error
		}
	});

	ipcMain.handle('get-excel-data', async (event, filepath, sheetname) => {
		try {
			const data = await getExcelData(filepath, sheetname);
			return (data);
		}
		catch (error) {
			console.log(error);
			throw error
		}
	});

	ipcMain.handle('sqlite:test', async (event, data) => {
		try {
			const testResult = Areas.finrOrCreateArea(data.licenseNumber, data.fieldName);
			return testResult
		} catch (error) {
			console.log(error);
			throw error
		}
	})

	ipcMain.handle('tempStorage:addData', async (event, uid, data) => {
		try {
			tempStorage.set(uid, data);
			return 'успешно'
		} catch (error) {
			return 'не успешно'
		}
	})

	ipcMain.handle('tempStorage:getDataById', async (event, uid) => {
		try {
			const data = tempStorage.get(uid);

			return 'успешно'
		} catch (error) {
			return 'не успешно'
		}
	})
};



// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
